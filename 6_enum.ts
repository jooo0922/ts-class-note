/**
 * 이넘(Enums)
 *
 * 이넘은 어떤 특정한 값들을 모아놓은 타입이라고 보면 됨.
 * 어떤 기준을 가지고 그 기준에 부합하는 값들을 모아놓은 자료형을 말함!
 *
 * 이넘에는
 * 1. 숫자형 이넘
 * 2. 문자형 이넘
 * 두 가지 형태가 존재함!
 *
 * 이넘의 항목에 별도의 값을 지정하지 않는다면,
 * 이넘의 첫 번째 값을 0으로 지정하고,
 * 그 이후의 값은 +1씩 증가된 값을 할당해 줌.
 *
 * -> 즉, 별도의 값을 지정하지 않는다면
 * 숫자형 이넘으로 기본값이 초기화되어 있는 상태임.
 */

// 숫자형 이넘
enum Shoes {
  Nike,
  Adidas,
}

const myShoes = Shoes.Nike;
console.log(myShoes); // 이넘에 별도의 값을 지정하지 않았으므로, 맨 첫번째 요소인 .Nike 는 0을 출력함.

// 문자형 이넘
enum Shoes2 {
  Nike = "나이키",
  Adidas = "아디다스",
}

const myShoes2 = Shoes2.Nike;
console.log(myShoes2); // 각 이넘에 문자열값을 지정했기 때문에, 맨 첫번째 요소인 .Nike 는 '나이키' 를 출력함.

// 이넘 사용 예제
enum Answer {
  Yes = "Y",
  No = "N",
}

function askQuestion(answer: Answer) {
  if (answer === Answer.Yes) {
    console.log("정답입니다.");
  }
  if (answer === Answer.No) {
    console.log("오답입니다.");
  }
}

askQuestion(Answer.Yes);
askQuestion("예스");
askQuestion("y");
askQuestion("Yes");

/**
 * answer 파라미터가 no냐 yes 냐에 따라
 * 서로 다른 콘솔을 출력하는
 * askQuestion 함수가 있다고 치자.
 *
 * 이 함수의 answer 파라미터를 단순히
 * string, 즉 문자열 정도로만 지정시켜 놓으면
 * yes 와 의미가 같은 수많은 문자열들,
 * 즉 '예스', 'y', 'Yes' 등등을 파라미터로 전달해도
 * 아무런 에러를 띄우지도 않고, 별도의 제한도 없음.
 *
 * 그러나 문제는 저런 식으로 뜻만 같다고 해서
 * 아무런 문자열이나 다 받아버리면
 * 함수가 제대로 작동하지 않을 것임.
 *
 * 그래서, 파라미터의 타입을
 * 이넘으로 지정해놓으면, 특정 문자열들을 미리 지정해놓은
 * 문자형 이넘만 파라미터로 전달받을 수 있고,
 * 나머지 문자열은 아예 전달 자체를 할 수 없도록 에러를 띄워버림.
 *
 * 즉, 의미가 통하는 여러 문자열이나 값들 중에서,
 * 이넘에서 제공되는 값만 전달받을 수 있도록 제한하고 싶을 때
 * 주로 이넘을 사용함.
 */

/**
 * 또한, 실무에서는 주로
 * 드롭다운 등의 목록이 필요한 형태에서
 * 이넘을 정의해서 쓰는 경우가 많고,
 *
 * 이런 방식으로 사용하는 게
 * 좀 더 정확한 코드 및 예외처리 케이스를
 * 줄일 수 있다고 함.
 */
