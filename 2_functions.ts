// 함수에서의 타입

// 함수의 파라미터에 타입을 정의하는 방식
// function sum(a: number, b: number) {
//   return a + b;
// }

// 이때, 리턴값의 타입은 따로 지정하지 않더라도,
// VSCode 에서 돌고 있는 ts 랭귀지 서버가 파라미터의 타입과,
// 걔내들을 이용한 계산식의 결과값을 추론하여 '아 리턴값도 number 겠구나'
// 이런 식으로 '타입 추론' 을 통해 리턴값의 타입을 알아서 정의해주기도 함.
// sum(10, 20);

// 함수의 리턴값에 타입을 정의하는 방식
function add(): number {
  // 여기서 리턴값을 number 라고 딱 지정해놨는데
  // 아무것도 리턴하지 않으면, 에러를 발생시킴.
  // 따라서 타입을 정의했으면, 그 타입에 맞는 값을 반드시 리턴해줘야 함.
  return 10;
}

// 함수에 타입을 정의하는 방식 기본구조 정리
function sum(a: number, b: number): number {
  return a + b;
}

// 함수의 파라미터 제한
// ts 는 js와 반대로 정해진 개수 이상의 파라미터를 전달하면
// 나머지 인자들에 대해서 불필요하게 4개의 인자를 넘겼다고 에러를 띄워버림.
// 이런 식으로 js 에 비해 함수의 구조나 타입에 대해 엄격하게 체크해 줌.
// sum(10, 20, 30, 40);
sum(10); // 이런식으로 인자를 덜 전달해도 에러를 띄워줌.

// 함수의 선택적 파라미터 (옵셔널 파라미터(?))
// 이거는 뭐 js 공부할 때에도 많이 봤겠지만
// 인자를 a만 넣어주고 b 처럼 뒤에 따라오는 인자들은
// 상황에 따라 넣거나 안넣거나 optional 하게 전달하고 싶을 때가 있음.
// 이럴 경우, optional 하게 넣어주려는 파라미터 자리에 ?(물음표) 를 붙여주면
// ts 서버가 b를 Optional Parameter 로 인식함.
function log(a: string, b?: string) {}
log("hello world"); // b 옆에 ? 를 없애는 순간 이렇게 a만 전달하는 log 함수 호출은 에러를 띄우게 되어있음.
// 왜? ? 가 없으면 optional 하게 넘겨줘도 되는 게 아니니까. 무조건 넘겨줘야 하는 거니까!
log("hello ts", "abc");
