// 타입 별칭
/**
 * 'type' 이라는 키워드를
 * 작성함으로써 타입별칭을 생성할 수 있음.
 */
// interface Person {
//   name: string;
//   age: number;
// }

type Person = {
  name: string;
  age: number;
};

// 타입별칭과 인터페이스의 차이를 알 수 있음.
// 위에 두 개의 Person (타입별칭 / 인터페이스) 을 번갈아서 확인해보면
// 인터페이스는 Person 에 마우스를 갖다대면 그냥 인터페이스 Person 이름만 나오는데 비해,
// 타입별칭은 마우스를 갖다대면 해당 타입의 내부 구조까지 다 보여줌.
const seho: Person = {
  name: "세호",
  age: 30,
};

// 타입별칭은 인터페이스 뿐만 아니라
// 사실상 타입을 정의할 수 있는 모든 곳에다가 타입별칭을 붙일 수 있음.
type MyString = string;
const str: MyString = "hello";

// Todo 프로젝트에서 이런 식으로 타입별칭을 활용했었지! (가독성이 좋아짐!)
type Todo = {
  id: string;
  title: string;
  done: boolean;
};
function getTodo(todo: Todo) {}

/**
 * 타입별칭 vs 인터페이스
 *
 *
 * 1. 타입별칭
 * 타입별칭은 어떤 새로운 타입 값을 하나 생성하는 거라기 보다는,
 * 미리 정의해 둔 타입에 이름(별칭)을 붙이는 느낌이라고 보면 됨.
 * -> 그래서 마우스를 갖다대면 VSCode 프리뷰에서 타입의 세부 구조가 다 나옴.
 *
 *
 * 2. 인터페이스
 * 반면, 인터페이스는 마우스를 갖다대면
 * VSCode 프리뷰에서 인터페이스 자체를 가리킴.
 *
 * 그래서 인터페이스만 별도의 파일로 빼서 정리해놓은 다음,
 * import 시켜서 다른 모듈로 가져와서 사용할 수 있음.
 *
 *
 * 그리고 가장 결정적인 차이점은,
 * 타입별칭은 extends 가 되지 않는다는 점!
 * 즉, 해당 타입을 확장할 수 없음.
 *
 * 반면 인터페이스는 extends 키워드를 통해
 * 확장이 가능함.
 *
 * 따라서, 가급적이면 타입별칭보다는
 * '인터페이스' 를 사용하는 게 좋음!
 *
 * 좋은 소프트웨어는 언제나 확장이 용이해야 하기 때문! (SOLID 원칙 중에 하나!)
 */
